package org.example;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.Console;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.core.type.TypeReference;//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
import java.util.*;
import java.util.Stack;
import java.io.FileReader;
import java.io.*;

public class BracketChecker {
    private Map<String, String> leftToRight;
    private Set<String> rightBrackets;

    // Конструктор для инициализации словарей из BracketConfig
    public BracketChecker(BracketConfig config) {
        leftToRight = new HashMap<>();
        rightBrackets = new HashSet<>();
        if (config != null && config.getBrackets() != null) {
            for (BracketConfig.BracketPair pair : config.getBrackets()) {
                if (pair.getLeft() != null && pair.getRight() != null && !pair.getLeft().isEmpty() && !pair.getRight().isEmpty()) {
                    leftToRight.put(pair.getLeft(), pair.getRight());
                    rightBrackets.add(pair.getRight());
                }
            }
        }
    }

    public static void main(String[] args) {
        // Проверка аргументов
        if (args.length != 2) {
            System.err.println("Ошибка: Укажите два аргумента: config.json и input.txt");
            System.err.println("Пример: java BracketChecker config.json input.txt");
            return;
        }

        String configPath = args[0];
        String inputPath = args[1];

        try {
            // Чтение конфигурации
            File configFile = new File(configPath);
            if (!configFile.exists()) {
                System.err.println("Ошибка: Файл конфигурации " + configPath + " не найден.");
                return;
            }

            ObjectMapper mapper = new ObjectMapper();
            BracketConfig config = mapper.readValue(configFile, BracketConfig.class);
            if (config == null || config.getBrackets() == null || config.getBrackets().length == 0) {
                System.err.println("Ошибка: Неверный формат конфигурации или пустой список скобок.");
                return;
            }

            // Создание объекта BracketChecker
            BracketChecker checker = new BracketChecker(config);

            // Чтение строки для проверки
            File inputFile = new File(inputPath);
            if (!inputFile.exists()) {
                System.err.println("Ошибка: Файл " + inputPath + " не найден.");
                return;
            }

            String input;
            try (BufferedReader reader = new BufferedReader(new FileReader(inputFile))) {
                input = reader.readLine();
                if (input == null) {
                    input = "";
                } else {
                    input = input.trim();
                }
            }

            // Проверка скобок
            Result result = checkBrackets(input, checker.leftToRight, checker.rightBrackets);

            if (result.isValid) {
                System.out.println("Скобки расставлены правильно.");
            } else {
                System.out.println("Ошибка в позиции " + (result.errorPosition + 1) + ": " + result.errorMessage);
                System.out.println("Строка: " + input);
                System.out.println("       " + " ".repeat(result.errorPosition) + "^");
            }
        } catch (IOException e) {
            System.err.println("Ошибка при чтении файлов: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("Ошибка: " + e.getMessage());
        }
    }

    private static class Result {
        boolean isValid;
        int errorPosition;
        String errorMessage;

        Result(boolean isValid, int errorPosition, String errorMessage) {
            this.isValid = isValid;
            this.errorPosition = errorPosition;
            this.errorMessage = errorMessage;
        }
    }

    private static class BracketPosition {
        String bracket;
        int position;

        BracketPosition(String bracket, int position) {
            this.bracket = bracket;
            this.position = position;
        }
    }

    private static Result checkBrackets(String input, Map<String, String> openingToClosing, Set<String> closingBrackets) {
        Stack<BracketPosition> stack = new Stack<>();

        for (int i = 0; i < input.length(); i++) {
            String current = input.substring(i, i + 1);

            // Проверка на открывающую скобку
            if (openingToClosing.containsKey(current)) {
                stack.push(new BracketPosition(current, i));
            }
            // Проверка на закрывающую скобку
            else if (closingBrackets.contains(current)) {
                if (stack.isEmpty()) {
                    return new Result(false, i, "Найдена закрывающая скобка '" + current + "' без соответствующей открывающей.");
                }

                BracketPosition last = stack.pop();
                if (!openingToClosing.get(last.bracket).equals(current)) {
                    return new Result(false, i, "Несоответствие скобок: ожидалась '" + openingToClosing.get(last.bracket) + "', найдена '" + current + "'.");
                }
            }
        }

        // Проверка незакрытых скобок
        if (!stack.isEmpty()) {
            BracketPosition unclosed = stack.pop();
            return new Result(false, unclosed.position, "Открывающая скобка '" + unclosed.bracket + "' не закрыта.");
        }

        return new Result(true, -1, "");
    }
}


